# Linear regression
# Importing necessary libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the diabetes dataset
diabetes = load_diabetes()

# Convert it to a Pandas DataFrame for better understanding
data = pd.DataFrame(data=diabetes.data, columns=diabetes.feature_names)
data['target'] = diabetes.target

# Display the first few rows
print(data.head())

# Select BMI as the feature and target variable
X = data[['bmi']]  # Independent variable
y = data['target']  # Dependent variable


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training set size:", len(X_train))
print("Testing set size:", len(X_test))

# Create and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Display the model coefficients
print("Slope (m):", model.coef_[0])
print("Intercept (c):", model.intercept_)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("R-squared (RÂ²):", r2)


# Plot the regression line
plt.scatter(X_train, y_train, color='blue', label='Training Data')
plt.plot(X_train, model.predict(X_train), color='red', label='Regression Line')
plt.xlabel('BMI')
plt.ylabel('Disease Progression')
plt.title('Regression Line on Training Data')
plt.legend()
plt.show()



# Plot actual vs. predicted values
plt.scatter(y_test, y_pred, color='green')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.show()


